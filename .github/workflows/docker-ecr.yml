name: Build and Deploy Profile Board

on:
  push:
    branches: [ main ]

env:
  TF_VAR_iam_user_arn: ${{ secrets.IAM_USER_ARN }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  AWS_REGION: ap-southeast-2

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Build jar
        run: ./gradlew build

  terraform-iam:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init (IAM Policies)
        run: terraform -chdir=aws init
      - name: Import existing IAM policies (if they exist)
        run: |
          terraform -chdir=aws import aws_iam_policy.profile_board_ec2_vpc arn:aws:iam::085366697881:policy/ProfileBoard-EC2-VPC || true
          terraform -chdir=aws import aws_iam_policy.profile_board_api_elb arn:aws:iam::085366697881:policy/ProfileBoard-API-ELB || true
          terraform -chdir=aws import aws_iam_policy.profile_board_rds_ecr arn:aws:iam::085366697881:policy/ProfileBoard-RDS-ECR || true
          terraform -chdir=aws import aws_iam_policy.profile_board_iam_sts arn:aws:iam::085366697881:policy/ProfileBoard-IAM-STS || true
          terraform -chdir=aws import aws_iam_user_policy_attachment.ec2_vpc_attachment $(echo "${{ env.TF_VAR_iam_user_arn }}" | sed 's/.*\///')/arn:aws:iam::085366697881:policy/ProfileBoard-EC2-VPC || true
          terraform -chdir=aws import aws_iam_user_policy_attachment.api_elb_attachment $(echo "${{ env.TF_VAR_iam_user_arn }}" | sed 's/.*\///')/arn:aws:iam::085366697881:policy/ProfileBoard-API-ELB || true
          terraform -chdir=aws import aws_iam_user_policy_attachment.rds_ecr_attachment $(echo "${{ env.TF_VAR_iam_user_arn }}" | sed 's/.*\///')/arn:aws:iam::085366697881:policy/ProfileBoard-RDS-ECR || true
          terraform -chdir=aws import aws_iam_user_policy_attachment.iam_sts_attachment $(echo "${{ env.TF_VAR_iam_user_arn }}" | sed 's/.*\///')/arn:aws:iam::085366697881:policy/ProfileBoard-IAM-STS || true
      - name: Terraform Plan (IAM Policies)
        run: |
          terraform -chdir=aws plan \
            -target=aws_iam_policy.profile_board_ec2_vpc \
            -target=aws_iam_policy.profile_board_api_elb \
            -target=aws_iam_policy.profile_board_rds_ecr \
            -target=aws_iam_policy.profile_board_iam_sts \
            -target=aws_iam_user_policy_attachment.ec2_vpc_attachment \
            -target=aws_iam_user_policy_attachment.api_elb_attachment \
            -target=aws_iam_user_policy_attachment.rds_ecr_attachment \
            -target=aws_iam_user_policy_attachment.iam_sts_attachment
      - name: Terraform Apply (IAM Policies)
        run: |
          terraform -chdir=aws apply -auto-approve \
            -target=aws_iam_policy.profile_board_ec2_vpc \
            -target=aws_iam_policy.profile_board_api_elb \
            -target=aws_iam_policy.profile_board_rds_ecr \
            -target=aws_iam_policy.profile_board_iam_sts \
            -target=aws_iam_user_policy_attachment.ec2_vpc_attachment \
            -target=aws_iam_user_policy_attachment.api_elb_attachment \
            -target=aws_iam_user_policy_attachment.rds_ecr_attachment \
            -target=aws_iam_user_policy_attachment.iam_sts_attachment

  docker-push:
    runs-on: ubuntu-latest
    needs: [ build, terraform-iam ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: profile-board
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  terraform-db:
    runs-on: ubuntu-latest
    needs: docker-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init (DB only)
        run: terraform -chdir=aws init
      - name: Terraform Apply (DB only)
        run: terraform -chdir=aws apply -auto-approve -target=aws_db_instance.profile_board_db

  terraform-apply:
    runs-on: ubuntu-latest
    needs: [ docker-push, terraform-db ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: terraform -chdir=aws init
      - name: Terraform Import ECR
        run: terraform -chdir=aws import aws_ecr_repository.profile_board profile-board || true
      - name: Terraform Apply (Infrastructure)
        run: |
          terraform -chdir=aws apply -auto-approve \
            -target=aws_ecr_repository.profile_board \
            -target=aws_vpc.profile_board_vpc \
            -target=aws_internet_gateway.profile_board_igw \
            -target=aws_subnet.public \
            -target=aws_subnet.private \
            -target=aws_subnet.private_2b \
            -target=aws_eip.nat_eip \
            -target=aws_nat_gateway.profile_board_nat \
            -target=aws_route_table.public_rt \
            -target=aws_route_table.private_rt \
            -target=aws_route_table_association.public_rta \
            -target=aws_route_table_association.private_rta \
            -target=aws_route_table_association.private_rta_2b \
            -target=aws_security_group.ec2_sg \
            -target=aws_security_group.nlb_sg \
            -target=aws_security_group.db_sg \
            -target=aws_db_subnet_group.profile_board_db_subnet_group \
            -target=aws_iam_role.ec2_ecr_role \
            -target=aws_iam_role_policy.ec2_ecr_policy \
            -target=aws_iam_instance_profile.ec2_profile \
            -target=aws_instance.profile_board_ec2 \
            -target=aws_lb.profile_board_nlb \
            -target=aws_lb_target_group.profile_board_tg \
            -target=aws_lb_target_group_attachment.profile_board_ec2_attachment \
            -target=aws_lb_listener.profile_board_listener \
            -target=aws_api_gateway_rest_api.profile_board_api \
            -target=aws_api_gateway_resource.heartbeat \
            -target=aws_api_gateway_method.heartbeat_get \
            -target=aws_api_gateway_vpc_link.profile_board_vpc_link \
            -target=aws_api_gateway_integration.heartbeat_integration \
            -target=aws_api_gateway_method_response.heartbeat_response_200 \
            -target=aws_api_gateway_integration_response.heartbeat_integration_response \
            -target=aws_api_gateway_deployment.profile_board_api_deployment \
            -target=aws_api_gateway_stage.prod
